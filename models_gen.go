// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package golang_graphql

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
)

type Disc struct {
	ArtistName       string  `json:"artistName"`
	Name             string  `json:"name"`
	Year             int     `json:"year"`
	ContainingTracks []Track `json:"containingTracks"`
}

type Track struct {
	ArtistName string `json:"artistName"`
	DiscName   string `json:"discName"`
	Name       string `json:"name"`
	Duration   *int   `json:"duration"`
}

type Genre string

const (
	GenrePop  Genre = "Pop"
	GenreRock Genre = "Rock"
)

func (e Genre) IsValid() bool {
	switch e {
	case GenrePop, GenreRock:
		return true
	}
	return false
}

func (e Genre) String() string {
	return string(e)
}

func (e *Genre) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Genre(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Genre", str)
	}
	return nil
}

func (e Genre) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
